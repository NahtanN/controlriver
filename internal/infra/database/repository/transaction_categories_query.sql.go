// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transaction_categories_query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createTransactionCategory = `-- name: CreateTransactionCategory :one
INSERT INTO transaction_categories (name, type) 
VALUES ($1, $2) 
ON CONFLICT (name, type) DO NOTHING 
RETURNING transaction_category_id
`

type CreateTransactionCategoryParams struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

func (q *Queries) CreateTransactionCategory(ctx context.Context, arg CreateTransactionCategoryParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTransactionCategory, arg.Name, arg.Type)
	var transaction_category_id uuid.UUID
	err := row.Scan(&transaction_category_id)
	return transaction_category_id, err
}

const findTransactionCategoriesByNames = `-- name: FindTransactionCategoriesByNames :many
SELECT transaction_category_id, name, type, created_at, deleted_at FROM transaction_categories 
WHERE name = ANY($1::varchar[])
`

func (q *Queries) FindTransactionCategoriesByNames(ctx context.Context, dollar_1 []string) ([]TransactionCategory, error) {
	rows, err := q.db.Query(ctx, findTransactionCategoriesByNames, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionCategory
	for rows.Next() {
		var i TransactionCategory
		if err := rows.Scan(
			&i.TransactionCategoryID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
