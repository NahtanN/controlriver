// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reports_query.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getReportByCategories = `-- name: GetReportByCategories :many
SELECT
  c.name,
	sum(t.amount) AS total_spent
FROM transactions t
LEFT JOIN account_categories ac ON ac.account_category_id = t.category_id
LEFT JOIN categories c ON c.category_id = ac.category_id
WHERE
	t.account_id = $1
	AND c.type = $2
	AND t.transaction_date BETWEEN $3 AND $4 
GROUP BY c.name
ORDER BY total_spent DESC
`

type GetReportByCategoriesParams struct {
	AccountID *uuid.UUID `json:"account_id"`
	Type      string     `json:"type"`
	From      time.Time  `json:"from"`
	To        time.Time  `json:"to"`
}

type GetReportByCategoriesRow struct {
	Name       *string `json:"name"`
	TotalSpent int64   `json:"total_spent"`
}

func (q *Queries) GetReportByCategories(ctx context.Context, arg GetReportByCategoriesParams) ([]GetReportByCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getReportByCategories,
		arg.AccountID,
		arg.Type,
		arg.From,
		arg.To,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportByCategoriesRow
	for rows.Next() {
		var i GetReportByCategoriesRow
		if err := rows.Scan(&i.Name, &i.TotalSpent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportByCategoriesWithParentCategory = `-- name: GetReportByCategoriesWithParentCategory :many
SELECT
  coalesce(pc_c.name, c.name) AS parent,
  c.name,
	sum(t.amount) AS total_spent
FROM transactions t
LEFT JOIN account_categories ac ON ac.account_category_id = t.category_id
LEFT JOIN categories c ON c.category_id = ac.category_id
LEFT JOIN account_categories pc
    ON pc.account_category_id = ac.parent_id
LEFT JOIN categories pc_c
    ON pc_c.category_id = pc.category_id
WHERE
	t.account_id = $1
	AND c.type = $2
  AND t.transaction_date BETWEEN $3 AND $4
GROUP BY c.name, pc_c.name
ORDER BY total_spent DESC
`

type GetReportByCategoriesWithParentCategoryParams struct {
	AccountID *uuid.UUID `json:"account_id"`
	Type      string     `json:"type"`
	From      time.Time  `json:"from"`
	To        time.Time  `json:"to"`
}

type GetReportByCategoriesWithParentCategoryRow struct {
	Parent     string  `json:"parent"`
	Name       *string `json:"name"`
	TotalSpent int64   `json:"total_spent"`
}

func (q *Queries) GetReportByCategoriesWithParentCategory(ctx context.Context, arg GetReportByCategoriesWithParentCategoryParams) ([]GetReportByCategoriesWithParentCategoryRow, error) {
	rows, err := q.db.Query(ctx, getReportByCategoriesWithParentCategory,
		arg.AccountID,
		arg.Type,
		arg.From,
		arg.To,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportByCategoriesWithParentCategoryRow
	for rows.Next() {
		var i GetReportByCategoriesWithParentCategoryRow
		if err := rows.Scan(&i.Parent, &i.Name, &i.TotalSpent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
